{
  "hash": "e50d4cdb3e97f843723fbee0e2857ac3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Document Storage\"\nexecute:\n  eval: false\n  freeze: auto\nbibliography: references.bib\n---\n\n\n\n\n\n\n\nThis chapter covers how you can upload, change, query, and delete documents and indexes in AmCAT.\nSome basic tasks are implemented in the [Web user interface](#manage-documents-with-a-client), for the rest you need to use [one of the clients](#manage-documents-with-a-client) in `R` or `Python` or another means to call the API (e.g., through [cURL](https://en.wikipedia.org/wiki/CURL) as shown below).\nYou can also use the API calls to build your own client.\n\nMore information on the API can be found on every amcat4 instance at `/redoc` (e.g., <http://localhost/amcat/redoc>).\n\nLet us know about it and we will promote your new API wrapper package here.\n\n## Manage Documents with the Graphic User Interface\n\n\n### Upload \n\nFrom the Graphic User Interface (GUI), you can “Create an Index” by uploading it as a csv file. \n\nNavigate to your favorite spreadsheet (e.g. Excel) and create something that resembles the following:\n\n![](media/amcat-3.1-1.png)\n\nSave it as csv utf-8:\n\n![](media/amcat-3.1-2.png)\n\nUpload it to AmCAT:\n\n![](media/amcat-3.1-3.png)\n\nFill out each option and press “Create”:\n\n![](media/amcat-3.1-4.png)\n\nThat will display a window with the following information:\n\n![](media/amcat-3.1-5.png)\n\nNow, you can just drag and drop the csv file into the window:\n\n![](media/amcat-3.1-6.png)\n\nThis will display a window with the following information:\n\n![](media/amcat-3.1-7.png)\n\nFrom there, you can either choose the type of field by clicking “Select field” or let AmCAT do it for you by clicking “automate”. If in doubt, then choose “automate”. Clicking “automate” on all gives the following result:\n\n![](media/amcat-3.1-8.png)\n\nYou have to explicitly choose the column(s) that will be used to create the unique identifier. In this example, I explicitly created a column named “id”. So, that is the one I chose as identifier:\n\n![](media/amcat-3.1-9.png)\n\nNow, you can press “Upload 15 documents”, which is the number of rows in the csv file. \n\n![](media/amcat-3.1-10.png)\n\nNow you can navigate to your indeces and find your newly made index:\n\n![](media/amcat-3.1-11.png)\n\n### Visualize \n\nOne of AmCAT features is that it allows you to perform some basic visualizations. To do so in the main window, you first need to enable them. \n\nFor this, you just need to click on “Enable visualizations in field settings”.\n\n![](media/amcat-3.2-1.png)\n\nThat will open the following window: \n\n![](media/amcat-3.2-2.png)\n\nFrom there, you just need to click on the fields ![](media/amcat-3.2-3.png), under the column “Display”, and choose the options “show as heading” and/or “visualize in list”.\n\n![](media/amcat-3.2-4.png)\n\nYou can go back to the main window by clicking on \"Dashboard\" ![](media/amcat-3.2-5.png). There you can see the visualizations you have enabled:\n\n![](media/amcat-3.2-6.png)\n\n\n## Manage Documents with the API\n\nFor this overview, we log into a local `amcat4` (i.e., `http://localhost/amcat`).\nReplace this with the address to the `amcat4` instance you are working with (e.g., `https://opted.amcat.nl/api`).\n\nWe first need to log in:\n\n\n::: {.panel-tabset}\n#### R\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(amcat4r)\namcat_login(\"http://localhost/amcat\")\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n\n\n\n\n#### Python\n\n\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom amcat4py import AmcatClient\namcat = AmcatClient(\"http://localhost/amcat\")\nif amcat.login_required():\n    amcat.login()\n```\n:::\n\n\n\n\n\n\n\n#### cURL\n\nThere is no dedicated way at the moment to get a token via cURL.\nYou can still use cURL with instances that do not require authentication or by copying the token from `Python` or `R`.\nIn these cases, you can make requests with an extra header, for example:\n\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nAMCAT_TOKEN=\"YOUR_TOKEN\"\ncurl -s http://localhost/amcat/index/ \\\n  -H \"Authorization: Bearer ${AMCAT_TOKEN}\"\n```\n:::\n\n\n\n\n\n\n:::\n\nWe can first list all available indexes, as a document collection is called in Elasticsearch and thus in AmCAT:\n\n::: {.panel-tabset}\n\n#### R\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist_indexes()\n```\n:::\n\n\n\n\n\n\n#### Python\n\n\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\namcat.list_indices()\n```\n:::\n\n\n\n\n\n\n#### cURL\n\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncurl -s http://localhost/amcat/index/\n```\n:::\n\n\n\n\n\n:::\n\nYou can see that the test index we added in the [Data Layer](#data-layer) section is here and that it is called \"state_of_the_union\".\n<!-- The `role` information here refers to the guest role, which means what access to the index a user has if they are granted no specific rights. -->\n<!-- For this special case of an index, a guest user can do everything to this index, including deleting in. -->\nTo see everyone who has been granted access to an index we can use:\n\n::: {.panel-tabset}\n\n#### R\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist_index_users(index = \"state_of_the_union\")\n```\n:::\n\n\n\n\n\n\n#### Python\n\n\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\namcat.list_index_users(index=\"state_of_the_union\")\n```\n:::\n\n\n\n\n\n\n#### cURL\n\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncurl -s http://localhost/amcat/index/state_of_the_union/users\n```\n:::\n\n\n\n\n\n:::\n\nWe will learn more about these roles in the chapter on [access management](#document-sharing-and-access-management).\nTo see what an index looks like, we can query it leaving all fields blank to request all data at once:\n\n::: {.panel-tabset}\n\n#### R\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsotu <- query_documents(index = \"state_of_the_union\", queries = NULL, fields = NULL)\nstr(sotu)\n```\n:::\n\n\n\n\n\n\n#### Python\n\n\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nsotu = list(amcat.query(\"state_of_the_union\", fields=None))\nprint(len(sotu))\nfor k, v in sotu[1].items():\n  print(k + \"(\" + str(type(v)) + \"): \" + str(v)[0:100] + \"...\")\n```\n:::\n\n\n\n\n\n\n#### cURL\n\nTo not clog the output, we save it into file and display only the beginning:\n\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncurl -s http://localhost/amcat/index/state_of_the_union/documents > sotu.json\n# show the first few characters only\nhead -c 150 sotu.json\n```\n:::\n\n\n\n\n\n\n\n\n:::\n\nKnowing now what a document should look like in this index, we can upload a new document to get familiar with the process:\n\n::: {.panel-tabset}\n\n#### R\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_doc <- data.frame(\n  title = \"test\",\n  text = \"test\",\n  date = as.Date(\"2022-01-01\"),\n  president = \"test\",\n  year = \"2022\",\n  party = \"test\",\n  url = \"test\"\n)\nupload_documents(index = \"state_of_the_union\", new_doc)\n```\n:::\n\n\n\n\n\n\n#### Python\n\n\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom datetime import datetime\nnew_doc = {\n  \"title\": \"test\",\n  \"text\": \"test\",\n  \"date\": datetime.strptime(\"2022-01-01\", '%Y-%m-%d'),\n  \"president\": \"test\",\n  \"year\": \"2022\",\n  \"party\": \"test\",\n  \"url\": \"test\"\n}\namcat.upload_documents(\"state_of_the_union\", [new_doc])\n```\n:::\n\n\n\n\n\n\n#### cURL\n\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncurl -s -X POST http://localhost/amcat/index/state_of_the_union/documents \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n         \"documents\":[\n            {\n               \"title\":\"test\",\n               \"text\":\"test\",\n               \"date\":\"2022-01-01\",\n               \"president\":\"test\",\n               \"year\":\"2022\",\n               \"party\":\"test\",\n               \"url\":\"test\"\n            }\n         ]\n      }'\n```\n:::\n\n\n\n\n\n:::\n\nLet's see if the the new document is in the index:\n\n::: {.panel-tabset}\n\n#### R\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nquery_documents(index = \"state_of_the_union\", fields = NULL, filters = list(title = \"test\"))\n```\n:::\n\n\n\n\n\n\n#### Python\n\n\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pprint\npp = pprint.PrettyPrinter(depth=4)\nres=list(amcat.query(\"state_of_the_union\", fields=None, filters={\"title\": \"test\"}))\npp.pprint(res)\n```\n:::\n\n\n\n\n\n\n#### cURL\n\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncurl -s -X POST http://localhost/amcat/index/state_of_the_union/query \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"filters\":{\"title\":[\"test\"]}}' | jq -r \".results\"\n```\n:::\n\n\n\n\n\n:::\n\nWe will learn more about queries later on in the [Writing a Query]() chapter.\n\nInstead of adding whole documents, you can also change fields in an index.\nFields are similar to columns in a table in Excel.\nHowever, you need to define the type of a field upon its creation and make sure that you later only add data which adheres to the specifications of the type (otherwise you will get an error).\nTo learn more about the fields in the test index, you can use:\n\n::: {.panel-tabset}\n\n#### R\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_fields(index = \"state_of_the_union\")\n```\n:::\n\n\n\n\n\n\n#### Python\n\n\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\namcat.get_fields(\"state_of_the_union\")\n```\n:::\n\n\n\n\n\n\n#### cURL\n\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncurl -s http://localhost/amcat/index/state_of_the_union/fields\n```\n:::\n\n\n\n\n\n:::\n\nYou can see that there are five different types in this index: date, keyword, text, url and double.\nKeyword, text, url are all essentially the same type in `R`, namely character strings.\nThe date needs to be a `POSIXct` class, which you can create with `as.Date`.\nYear should be a double, i.e., a numeric value or integer.\n\nYou can add new fields to this, for example, if you want to add a keyword to the documents:\n\n::: {.panel-tabset}\n\n#### R\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset_fields(index = \"state_of_the_union\", list(keyword = \"keyword\"))\n```\n:::\n\n\n\n\n\n\n#### Python\n\n\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\namcat.set_fields(\"state_of_the_union\", {\"keyword\":\"keyword\"})\n```\n:::\n\n\n\n\n\n\n#### cURL\n\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncurl -s -X POST http://localhost/amcat/index/state_of_the_union/fields \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"keyword\":\"keyword\"}'\n```\n:::\n\n\n\n\n\n:::\n\nWhen you now query a document, however, you will not see this new field:\n\n::: {.panel-tabset}\n\n#### R\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nquery_documents(index = \"state_of_the_union\", fields = NULL, filters = list(title = \"test\"))\n```\n:::\n\n\n\n\n\n\n#### Python\n\n\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nres = list(amcat.query(\"state_of_the_union\", fields=None, filters={\"title\": \"test\"}))\npp.pprint(res)\n```\n:::\n\n\n\n\n\n\n#### cURL\n\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncurl -s -X POST http://localhost/amcat/index/state_of_the_union/query \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"filters\":{\"title\":[\"test\"]}}' | jq -r \".results\"\n```\n:::\n\n\n\n\n\n:::\n\nThis is because it is empty for this document, just as the url field, which is absent from all documents in this index.\nWe can add something to the new field and see if it shows up:\n\n::: {.panel-tabset}\n\n#### R\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nupdate_tags(index = \"state_of_the_union\", \n            action = \"add\", \n            field = \"keyword\", \n            tag = \"test\", \n            filters = list(title = \"test\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nquery_documents(index = \"state_of_the_union\", \n                fields = c(\"title\", \"keyword\"),\n                filters = list(title = \"test\"))\n```\n:::\n\n\n\n\n\n\n#### Python\n\n\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\ntest_doc = list(amcat.query(\"state_of_the_union\", fields=[\"id\"], filters={\"title\": \"test\"}))[0]\namcat.update_document(\"state_of_the_union\", doc_id=test_doc[\"_id\"], body={\"keyword\": \"test\"})\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nres=list(amcat.query(\"state_of_the_union\", fields=[\"title\", \"keyword\"], filters={\"title\": \"test\"}))\npp.pprint(res)\n```\n:::\n\n\n\n\n\n\n#### cURL\n\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ntest_doc=$(curl -s -X POST http://localhost/amcat/index/state_of_the_union/query \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"filters\":{\"title\":[\"test\"]}}' | jq -r \".results[]._id\")\ncurl -s -X PUT http://localhost/amcat/index/state_of_the_union/documents/${test_doc} \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"keyword\": \"test\"}'\n```\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\ncurl -s -X POST http://localhost/amcat/index/state_of_the_union/query \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"filters\":{\"title\":[\"test\"]}}' | jq -r \".results\"\n```\n:::\n\n\n\n\n\n:::\n\nNow that we have a better idea of what an index is and how it looks like, we can create a new one>\n\n::: {.panel-tabset}\n\n#### R\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncreate_index(index = \"new_index\", guest_role = \"admin\")\nlist_indexes()\nget_fields(index = \"new_index\")\n```\n:::\n\n\n\n\n\n\n#### Python\n\n\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\namcat.create_index(index=\"new_index\", guest_role=\"admin\")\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\namcat.list_indices()\namcat.get_fields(\"new_index\")\n```\n:::\n\n\n\n\n\n\n#### cURL\n\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncurl -s -X POST http://localhost/amcat/index/ \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"name\": \"new_index\",\n        \"guest_role\": \"ADMIN\"\n      }'\n```\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\ncurl -s http://localhost/amcat/index/\ncurl -s http://localhost/amcat/index/new_index/fields\n```\n:::\n\n\n\n\n\n\n:::\n\nAs you can see, the newly created index already contains fields.\nYou could now manually define new fields to fit your data.\nOr you can simply start uploading data:\n\n::: {.panel-tabset}\n\n#### R\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_doc <- data.frame(\n  title = \"test\",\n  text = \"test\",\n  date = as.Date(\"2022-01-01\"),\n  president = \"test\",\n  year = \"2022\",\n  party = \"test\",\n  url = \"test\"\n)\nupload_documents(index = \"new_index\", new_doc)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nget_fields(index = \"new_index\")\n```\n:::\n\n\n\n\n\n\n#### Python\n\n\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nnew_doc = {\n  \"title\": \"test\",\n  \"text\": \"test\",\n  \"date\": datetime.strptime(\"2022-01-01\", '%Y-%m-%d'),\n  \"president\": \"test\",\n  \"year\": \"2022\",\n  \"party\": \"test\",\n  \"url\": \"test\"\n}\namcat.upload_documents(\"new_index\", [new_doc])\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\namcat.get_fields(\"new_index\")\n```\n:::\n\n\n\n\n\n\n\n#### cURL\n\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncurl -s -X POST http://localhost/amcat/index/new_index/documents \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n         \"documents\":[\n            {\n               \"title\":\"test\",\n               \"text\":\"test\",\n               \"date\":\"2022-01-01\",\n               \"president\":\"test\",\n               \"year\":\"2022\",\n               \"party\":\"test\",\n               \"url\":\"test\"\n            }\n         ]\n      }'\n```\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\ncurl -s http://localhost/amcat/index/new_index/fields\n```\n:::\n\n\n\n\n\n\n:::\n\n`amcat4` guesses the types of fields based on the data.\nYou can see here that this might not be the best option if you care about data types: party and president have been created as text, when they should be keywords; year is now a long type instead of double or integer. \n<!-- TODO: Why should people care about types? -->\n\nFinally, we can also delete an index:\n\n::: {.panel-tabset}\n\n#### R\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndelete_index(index = \"new_index\")\n```\n:::\n\n\n\n\n\n\n#### Python\n\n\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\namcat.delete_index(\"new_index\")\n```\n:::\n\n\n\n\n\n\n#### cURL\n\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncurl -s -X DELETE http://localhost/amcat/index/new_index\n```\n:::\n\n\n\n\n\n:::\n\n### A Note on the ID Field and Duplicated Documents\n\nAmCAT indexes can have all kinds of fields, yet one special field must be present in every document of every index: a unique ID.\nThis ID is usually not that noteworthy, since the user does not really need to take care of it.\nThis changes, however, with the special case of duplicated documents, that is, a document with the exact same information in the same fields.\nAmCAT does not normally check if your documents are duplicated when you upload them.\nHowever, when no ID is present in an uploaded document, as in the example we uploaded above, AmCAT will construct a unique ID from the available data of a document.\nLet us have another look at that document we titled \"test\":\n\n::: {.panel-tabset}\n\n#### R\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nquery_documents(index = \"state_of_the_union\", fields = NULL, filters = list(title = \"test\"))\n```\n:::\n\n\n\n\n\n\n#### Python\n\n\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nres=list(amcat.query(\"state_of_the_union\", fields=None, filters={\"title\": \"test\"}))\npp.pprint(res)\n```\n:::\n\n\n\n\n\n\n#### cURL\n\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncurl -s -X POST http://localhost/amcat/index/state_of_the_union/query \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"filters\":{\"title\":[\"test\"]}}' | jq -r \".results\"\n```\n:::\n\n\n\n\n\n:::\n\nNote that AmCAT has automatically added an `_id` field (in `R` it is `.id` due to naming conventions) to the document.\nIf we would upload the same document again, the algorithm that constructs the `_id` field would come up with the same value and the document would be replaced by the newly uploaded document.\nIf we wanted to keep a duplicate for some reason, we could accomplish that by either changing at least one value in a field or by assigning an ID column manually:\n\n::: {.panel-tabset}\n\n#### R\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_doc <- data.frame(\n  .id = \"1\",\n  title = \"test\",\n  text = \"test\",\n  date = as.Date(\"2022-01-01\"),\n  president = \"test\",\n  year = \"2022\",\n  party = \"test\",\n  url = \"test\"\n)\nupload_documents(index = \"state_of_the_union\", new_doc)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nquery_documents(index = \"state_of_the_union\", fields = NULL, filters = list(title = \"test\"))\n```\n:::\n\n\n\n\n\n\n#### Python\n\n\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom datetime import datetime\nnew_doc = {\n  \"_id\": \"1\",\n  \"title\": \"test\",\n  \"text\": \"test\",\n  \"date\": datetime.strptime(\"2022-01-01\", '%Y-%m-%d'),\n  \"president\": \"test\",\n  \"year\": \"2022\",\n  \"party\": \"test\",\n  \"url\": \"test\"\n}\namcat.upload_documents(\"state_of_the_union\", [new_doc])\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nres=list(amcat.query(\"state_of_the_union\", fields=None, filters={\"title\": \"test\"}))\npp.pprint(res)\n```\n:::\n\n\n\n\n\n\n\n#### cURL\n\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncurl -s -X POST http://localhost/amcat/index/state_of_the_union/documents \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"documents\":[\n          {\n            \"_id\": \"1\",\n            \"title\":\"test\",\n            \"text\":\"test\",\n            \"date\":\"2022-01-01\",\n            \"president\":\"test\",\n            \"year\":\"2022\",\n            \"party\":\"test\",\n            \"url\":\"test\"\n          }\n        ]\n      }'\n```\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\ncurl -s -X POST http://localhost/amcat/index/state_of_the_union/query \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"filters\":{\"title\":[\"test\"]}}' | jq -r \".results\"\n```\n:::\n\n\n\n\n\n:::\n\nAs you can see, we now have the example document in the index twice -- although with different IDs.\nTo simulate what would have happened without an ID, or rather if the ID had been constructed automatically, we can upload different data, but with the same ID to see what changes:\n\n::: {.panel-tabset}\n\n#### R\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_doc <- data.frame(\n  .id = \"1\",\n  title = \"test\",\n  text = \"A second test\",\n  date = as.Date(\"2022-01-02\"),\n  president = \"test\",\n  year = \"2022\"\n)\nupload_documents(index = \"state_of_the_union\", new_doc)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nquery_documents(index = \"state_of_the_union\", fields = NULL, filters = list(title = \"test\"))\n```\n:::\n\n\n\n\n\n\n#### Python\n\n\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom datetime import datetime\nnew_doc = {\n  \"_id\": \"1\",\n  \"title\": \"test\",\n  \"text\": \"A second test\",\n  \"date\": datetime.strptime(\"2022-01-02\", '%Y-%m-%d'),\n  \"president\": \"test\",\n  \"year\": \"2022\"\n}\namcat.upload_documents(\"state_of_the_union\", [new_doc])\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nres=list(amcat.query(\"state_of_the_union\", fields=None, filters={\"title\": \"test\"}))\npp.pprint(res)\n```\n:::\n\n\n\n\n\n\n#### cURL\n\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncurl -s -X POST http://localhost/amcat/index/state_of_the_union/documents \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"documents\":[\n          {\n            \"_id\": \"1\",\n            \"title\":\"test\",\n            \"text\":\"A second test\",\n            \"date\":\"2022-01-02\",\n            \"president\":\"test\",\n            \"year\":\"2022\"\n          }\n        ]\n      }'\n```\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\ncurl -s -X POST http://localhost/amcat/index/state_of_the_union/query \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"filters\":{\"title\":[\"test\"]}}' | jq -r \".results\"\n```\n:::\n\n\n\n\n\n:::\n\nThe document with the ID 1 has been replaced with the new data.\nThis is the normal behaviour of AmCAT: when we tell it to add data to an already present document, identified by the ID, it will be replaced.\nIf a field was present in the old document, but not in the data it is replaced with, this field will be empty afterwards.\n\n",
    "supporting": [
      "03._storage_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}