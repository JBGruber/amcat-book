{
  "hash": "42348db80ca56e5e920913ad8b8e69ed",
  "result": {
    "markdown": "---\ntitle: \"Document Storage\"\nexecute:\n  freeze: auto\nbibliography: references.bib\n---\n\n\n\n\n\n::: {.callout-note}\nYou need at least the modules in the Data Layer and one Frontend Client to work with document storage:\n\n![amcat instance after following this chapter](media/amcat-flow-getting-started.drawio.png)\n\n:::\n\nThis chapter covers how you can upload, change, query and delete documents and indexes on the amcat server.\nOnly a few tasks are implemented in the [Web user interface](#manage-documents-with-a-client), which means you will need to use [one of the clients](#manage-documents-with-a-client) in `R` or `Python` or another means to call the API (e.g., through [cURL](https://en.wikipedia.org/wiki/CURL) as shown below).\nYou can also use the API calls to build your own client.\nMore information on the API can be found on every amcat4 instance at `/redoc` (e.g., <http://localhost/api/redoc>).\nLet us know about it and we will promote your new API wrapper package here.\n\n## Manage Documents With the Web Interface\n\n::: {.callout-important}\n# Coming soon...\n:::\n\n::: {.callout-important}\n# Will change soon\n\nCurrently, there is no way to upload, change, or delete documents and indexes through the web interface.\nRather, you can add new datasets through [calls to the amcat API](#manage-documents-with-a-client).\n:::\n\n## Manage Documents With a Client\n\nFor this overview, we log into a local `amcat4` (i.e., `http://localhost/api`).\nReplace this with the address to the `amcat4` instance you are working with (e.g., `https://opted.amcat.nl/api`).\n\nWe first need to log in:\n\n::: {.panel-tabset}\n\n#### R\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(amcat4r)\namcat_auth(\"http://localhost/api\",  username = \"admin\", password = \"supergeheim\", cache = 1L)\n```\n:::\n\n\nIf you are using RStudio, you can omit the `password` argument and enter it instead through the RStudio password dialogue.\n\n#### Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport json\nfrom amcat4apiclient.amcat4apiclient import AmcatClient\namcat = AmcatClient(\"http://localhost/api\", \"admin\", \"supergeheim\")\n```\n:::\n\n\n#### cURL\n\nWe extract the token from the retrieved JSON using the jq package.\nThis assumes you are using the terminal on a unix-like system.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nAMCAT_TOKEN=$(curl -s -d \"username=admin&password=supergeheim\" -X POST http://localhost/api/auth/token | jq -r \".access_token\")\n```\n:::\n\n::: {.cell}\n\n:::\n\n:::\n\nWe can first list all available indexes, as a document collection is called in Elasticsearch and thus in amcat:\n\n::: {.panel-tabset}\n\n#### R\n\n::: {.cell}\n\n```{.r .cell-code}\nlist_indexes()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n  name               role \n  <chr>              <chr>\n1 state_of_the_union ADMIN\n```\n:::\n:::\n\n\n#### Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\namcat.list_indices()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[{'name': 'state_of_the_union', 'role': 'ADMIN'}]\n```\n:::\n:::\n\n\n#### cURL\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncurl -s http://localhost/api/index/ \\\n  -H \"Authorization: Bearer ${AMCAT_TOKEN}\"\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n[{\"name\":\"state_of_the_union\",\"role\":\"ADMIN\"}]\n```\n:::\n:::\n\n:::\n\nYou can see that the test index we added in the [Data Layer](#data-layer) section is here and that it is called \"state_of_the_union\".\nThe `role` information here refers to the guest role, which means what access to the index a user has if they are granted no specific rights.\nFor this special case of an index, a guest user can do everything to this index, including deleting in.\nWe will learn more about these roles in the chapter on [access management](#document-sharing-and-access-management).\nTo see everyone who has been granted access to an index (beyond the guest role) we can use:\n\n::: {.panel-tabset}\n\n#### R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist_index_users(index = \"state_of_the_union\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n  email role \n  <chr> <chr>\n1 admin ADMIN\n```\n:::\n:::\n\n\n#### Python\n\n<!-- seems to be missing -->\n\n::: {.cell}\n\n:::\n\n\n#### cURL\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncurl -s http://localhost/api/index/state_of_the_union/users \\\n  -H \"Authorization: Bearer ${AMCAT_TOKEN}\"\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n[{\"email\":\"admin\",\"role\":\"ADMIN\"}]\n```\n:::\n:::\n\n:::\n\nTo see what an index looks like, we can query it leaving all fields blank to request all data at once:\n\n::: {.panel-tabset}\n\n#### R\n\n::: {.cell}\n\n```{.r .cell-code}\nsotu <- query_documents(index = \"state_of_the_union\", queries = NULL, fields = NULL)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRetrieved 232 results in 1 pages\n```\n:::\n\n```{.r .cell-code}\nstr(sotu)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntibble [232 × 7] (S3: tbl_df/tbl/data.frame)\n $ .id      : chr [1:232] \"3411a08d219f601be3a6596196436b64d0c9fe27967ae6118c7d1c50\" \"56593148b47cc7027a964fcabb22bb13fda1bcbd5cc50fa333876ae6\" \"ca3069f6ec7ad5fb1fe1a0c3d1c08e40f38075d7eb660550b320b190\" \"8b24279714759f8efd2193cbf8d84324aac01e52ad3b4ab2143de4e9\" ...\n $ title    : chr [1:232] \"1790: George Washington\" \"1790: George Washington\" \"1791: George Washington\" \"1792: George Washington\" ...\n $ text     : chr [1:232] \"Fellow-Citizens of the Senate and House of Representatives:  \\nI embrace with great satisfaction the opportunit\"| __truncated__ \"Fellow-Citizens of the Senate and House of Representatives:  \\nIn meeting you again I feel much satisfaction in\"| __truncated__ \"Fellow-Citizens of the Senate and House of Representatives:  \\n\\\"In vain may we expect peace with the Indians o\"| __truncated__ \"Fellow-Citizens of the Senate and House of Representatives:  \\nIt is some abatement of the satisfaction with wh\"| __truncated__ ...\n $ date     : POSIXct[1:232], format: \"1790-01-08\" \"1790-12-08\" ...\n $ president: chr [1:232] \"George Washington\" \"George Washington\" \"George Washington\" \"George Washington\" ...\n $ year     : chr [1:232] \"1790\" \"1790\" \"1791\" \"1792\" ...\n $ party    : chr [1:232] \"N/A\" \"N/A\" \"N/A\" \"N/A\" ...\n```\n:::\n:::\n\n\n#### Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\nsotu = list(amcat.query(\"state_of_the_union\", fields=None))\nprint(len(sotu))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n232\n```\n:::\n\n```{.python .cell-code}\nfor k, v in sotu[1].items():\n  print(k + \"(\" + str(type(v)) + \"): \" + str(v)[0:100] + \"...\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n_id(<class 'str'>): 56593148b47cc7027a964fcabb22bb13fda1bcbd5cc50fa333876ae6...\ntitle(<class 'str'>): 1790: George Washington...\ntext(<class 'str'>): Fellow-Citizens of the Senate and House of Representatives:  \nIn meeting you again I feel much satis...\ndate(<class 'datetime.datetime'>): 1790-12-08 00:00:00...\npresident(<class 'str'>): George Washington...\nyear(<class 'str'>): 1790...\nparty(<class 'str'>): N/A...\n```\n:::\n:::\n\n\n#### cURL\n\nTo not clog the output, we save it into file and diplay only the beginning:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncurl -s http://localhost/api/index/state_of_the_union/documents \\\n  -H \"Authorization: Bearer ${AMCAT_TOKEN}\" > sotu.json\n# show the first few characters only\nhead -c 150 sotu.json\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n{\"results\":[{\"_id\":\"3411a08d219f601be3a6596196436b64d0c9fe27967ae6118c7d1c50\",\"title\":\"1790: George Washington\",\"text\":\"Fellow-Citizens of the Senate \n```\n:::\n:::\n\n:::\n\nKnowing now what a document should look like in this index, we can upload a new document to get familiar with the process:\n\n::: {.panel-tabset}\n\n#### R\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_doc <- data.frame(\n  title = \"test\",\n  text = \"test\",\n  date = as.Date(\"2022-01-01\"),\n  president = \"test\",\n  year = \"2022\",\n  party = \"test\",\n  url = \"test\"\n)\nupload_documents(index = \"state_of_the_union\", new_doc)\n```\n:::\n\n\n\n\n#### Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom datetime import datetime\nnew_doc = {\n  \"title\": \"test\",\n  \"text\": \"test\",\n  \"date\": datetime.strptime(\"2022-01-01\", '%Y-%m-%d'),\n  \"president\": \"test\",\n  \"year\": \"2022\",\n  \"party\": \"test\",\n  \"url\": \"test\"\n}\namcat.upload_documents(\"state_of_the_union\", [new_doc])\n```\n:::\n\n\n#### cURL\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncurl -s -X POST http://localhost/api/index/state_of_the_union/documents \\\n  -H \"Authorization: Bearer ${AMCAT_TOKEN}\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n         \"documents\":[\n            {\n               \"title\":\"test\",\n               \"text\":\"test\",\n               \"date\":\"2022-01-01\",\n               \"president\":\"test\",\n               \"year\":\"2022\",\n               \"party\":\"test\",\n               \"url\":\"test\"\n            }\n         ]\n      }'\n```\n:::\n\n:::\n\nLet's see if the the new document is in the index:\n\n::: {.panel-tabset}\n\n#### R\n\n::: {.cell}\n\n```{.r .cell-code}\nquery_documents(index = \"state_of_the_union\", fields = NULL, filters = list(title = \"test\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRetrieved 1 results in 1 pages\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 8\n  .id                  title date                text  url   presi…¹ year  party\n  <chr>                <chr> <dttm>              <chr> <chr> <chr>   <chr> <chr>\n1 47e0f77cba833d26c96… test  2022-01-01 00:00:00 test  test  test    2022  test \n# … with abbreviated variable name ¹​president\n```\n:::\n:::\n\n\n#### Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\nres=list(amcat.query(\"state_of_the_union\", fields=None, filters={\"title\": \"test\"}))\nprint(res)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[{'_id': '47e0f77cba833d26c963c3a3370e8dad8416cf55c0612c96e241aa12', 'title': 'test', 'date': datetime.datetime(2022, 1, 1, 0, 0), 'text': 'test', 'url': 'test', 'president': 'test', 'year': '2022', 'party': 'test'}]\n```\n:::\n:::\n\n\n#### cURL\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncurl -s -X POST http://localhost/api/index/state_of_the_union/query \\\n  -H \"Authorization: Bearer ${AMCAT_TOKEN}\" \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"filters\":{\"title\":[\"test\"]}}'\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n{\"results\":[{\"_id\":\"47e0f77cba833d26c963c3a3370e8dad8416cf55c0612c96e241aa12\",\"title\":\"test\",\"date\":\"2022-01-01\",\"text\":\"test\",\"url\":\"test\",\"president\":\"test\",\"year\":\"2022\",\"party\":\"test\"}],\"meta\":{\"total_count\":1,\"per_page\":10,\"page_count\":1,\"page\":0,\"scroll_id\":null}}\n```\n:::\n:::\n\n:::\n\nWe will learn more about queries later on in the [Writing a Query]() chapter.\n\nInstead of adding whole documents, you can also change fields in an index.\nFields are similar to columns in a table in Excel.\nHowever, you need to define the type of a field upon its creation and make sure that you later only add data which adheres to the specifications of the type (otherwise you will get an error).\nTo learn more about the fields in the test index, you can use:\n\n::: {.panel-tabset}\n\n#### R\n\n::: {.cell}\n\n```{.r .cell-code}\nget_fields(index = \"state_of_the_union\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 7 × 2\n  name      type   \n  <chr>     <chr>  \n1 date      date   \n2 party     keyword\n3 president keyword\n4 text      text   \n5 title     text   \n6 url       url    \n7 year      double \n```\n:::\n:::\n\n\n#### Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\namcat.get_fields(\"state_of_the_union\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'date': {'name': 'date', 'type': 'date'}, 'party': {'name': 'party', 'type': 'keyword'}, 'president': {'name': 'president', 'type': 'keyword'}, 'text': {'name': 'text', 'type': 'text'}, 'title': {'name': 'title', 'type': 'text'}, 'url': {'name': 'url', 'type': 'url', 'meta': {'amcat4_type': 'url'}}, 'year': {'name': 'year', 'type': 'double'}}\n```\n:::\n:::\n\n\n#### cURL\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncurl -s http://localhost/api/index/state_of_the_union/fields \\\n  -H \"Authorization: Bearer ${AMCAT_TOKEN}\"\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n{\"date\":{\"name\":\"date\",\"type\":\"date\"},\"party\":{\"name\":\"party\",\"type\":\"keyword\"},\"president\":{\"name\":\"president\",\"type\":\"keyword\"},\"text\":{\"name\":\"text\",\"type\":\"text\"},\"title\":{\"name\":\"title\",\"type\":\"text\"},\"url\":{\"name\":\"url\",\"type\":\"url\",\"meta\":{\"amcat4_type\":\"url\"}},\"year\":{\"name\":\"year\",\"type\":\"double\"}}\n```\n:::\n:::\n\n:::\n\nYou can see that there are five different types in this index: date, keyword, text, url and double.\nKeyword, text, url are all essentially the same type in `R`, namely character strings.\nThe date needs to be a `POSIXct` class, which you can create with `as.Date`.\nYear should be a double, i.e., a numeric value or integer.\n\nYou can add new fields to this, for example, if you want to add a keyword to the documents:\n\n::: {.panel-tabset}\n\n#### R\n\n::: {.cell}\n\n```{.r .cell-code}\nset_fields(index = \"state_of_the_union\", list(keyword = \"keyword\"))\n```\n:::\n\n\n#### Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\namcat.set_fields(\"state_of_the_union\", {\"keyword\":\"keyword\"})\n```\n:::\n\n\n#### cURL\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncurl -s -X POST http://localhost/api/index/state_of_the_union/fields \\\n  -H \"Authorization: Bearer ${AMCAT_TOKEN}\" \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"keyword\":\"keyword\"}'\n```\n:::\n\n:::\n\nWhen you now query a document, however, you will not see this new field:\n\n::: {.panel-tabset}\n\n#### R\n\n::: {.cell}\n\n```{.r .cell-code}\nquery_documents(index = \"state_of_the_union\", fields = NULL, filters = list(title = \"test\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRetrieved 1 results in 1 pages\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 8\n  .id                  title date                text  url   presi…¹ year  party\n  <chr>                <chr> <dttm>              <chr> <chr> <chr>   <chr> <chr>\n1 47e0f77cba833d26c96… test  2022-01-01 00:00:00 test  test  test    2022  test \n# … with abbreviated variable name ¹​president\n```\n:::\n:::\n\n\n#### Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\nres=list(amcat.query(\"state_of_the_union\", fields=None, filters={\"title\": \"test\"}))\nprint(res)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[{'_id': '47e0f77cba833d26c963c3a3370e8dad8416cf55c0612c96e241aa12', 'title': 'test', 'date': datetime.datetime(2022, 1, 1, 0, 0), 'text': 'test', 'url': 'test', 'president': 'test', 'year': '2022', 'party': 'test'}]\n```\n:::\n:::\n\n\n#### cURL\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncurl -s -X POST http://localhost/api/index/state_of_the_union/query \\\n  -H \"Authorization: Bearer ${AMCAT_TOKEN}\" \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"filters\":{\"title\":[\"test\"]}}'\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n{\"results\":[{\"_id\":\"47e0f77cba833d26c963c3a3370e8dad8416cf55c0612c96e241aa12\",\"title\":\"test\",\"date\":\"2022-01-01\",\"text\":\"test\",\"url\":\"test\",\"president\":\"test\",\"year\":\"2022\",\"party\":\"test\"}],\"meta\":{\"total_count\":1,\"per_page\":10,\"page_count\":1,\"page\":0,\"scroll_id\":null}}\n```\n:::\n:::\n\n:::\n\nThis is because it is empty for this document, just as the url field, which is absent from all documents in this index.\nWe can add something to the new field and see if it shows up:\n\n::: {.panel-tabset}\n\n#### R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nupdate_tags(index = \"state_of_the_union\", \n            action = \"add\", \n            field = \"keyword\", \n            tag = \"test\", \n            filters = list(title = \"test\"))\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nquery_documents(index = \"state_of_the_union\", \n                fields = c(\"title\", \"keyword\"),\n                filters = list(title = \"test\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRetrieved 1 results in 1 pages\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 3\n  .id                                                      title keyword  \n  <chr>                                                    <chr> <list>   \n1 47e0f77cba833d26c963c3a3370e8dad8416cf55c0612c96e241aa12 test  <chr [1]>\n```\n:::\n:::\n\n\n#### Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\ntest_doc = list(amcat.query(\"state_of_the_union\", fields=[\"id\"], filters={\"title\": \"test\"}))[0]\namcat.update_document(\"state_of_the_union\", doc_id=test_doc[\"_id\"], body={\"keyword\": \"test\"})\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nres=list(amcat.query(\"state_of_the_union\", fields=None, filters={\"title\": \"test\"}))\nprint(res)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[{'_id': '47e0f77cba833d26c963c3a3370e8dad8416cf55c0612c96e241aa12', 'date': datetime.datetime(2022, 1, 1, 0, 0), 'year': '2022', 'text': 'test', 'title': 'test', 'keyword': ['test'], 'url': 'test', 'party': 'test', 'president': 'test'}]\n```\n:::\n:::\n\n\n#### cURL\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ntest_doc=$(curl -s -X POST http://localhost/api/index/state_of_the_union/query \\\n  -H \"Authorization: Bearer ${AMCAT_TOKEN}\" \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"filters\":{\"title\":[\"test\"]}}' | jq -r \".results[]._id\")\ncurl -s -X PUT http://localhost/api/index/state_of_the_union/documents/${test_doc} \\\n  -H \"Authorization: Bearer ${AMCAT_TOKEN}\" \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"keyword\": \"test\"}'\n```\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\ncurl -s -X POST http://localhost/api/index/state_of_the_union/query \\\n  -H \"Authorization: Bearer ${AMCAT_TOKEN}\" \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"filters\":{\"title\":[\"test\"]}}'\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n{\"results\":[{\"_id\":\"47e0f77cba833d26c963c3a3370e8dad8416cf55c0612c96e241aa12\",\"date\":\"2022-01-01\",\"year\":\"2022\",\"text\":\"test\",\"title\":\"test\",\"keyword\":[\"test\"],\"url\":\"test\",\"party\":\"test\",\"president\":\"test\"}],\"meta\":{\"total_count\":1,\"per_page\":10,\"page_count\":1,\"page\":0,\"scroll_id\":null}}\n```\n:::\n:::\n\n:::\n\nNow that we have a better idea of what an index is and how it looks like, we can create a new one>\n\n::: {.panel-tabset}\n\n#### R\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncreate_index(index = \"new_index\", guest_role = \"admin\")\nlist_indexes()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n  name               role \n  <chr>              <chr>\n1 state_of_the_union ADMIN\n2 new_index          ADMIN\n```\n:::\n\n```{.r .cell-code}\nget_fields(index = \"new_index\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 2\n  name  type \n  <chr> <chr>\n1 date  date \n2 text  text \n3 title text \n4 url   url  \n```\n:::\n:::\n\n\n#### Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\namcat.create_index(index=\"new_index\", guest_role=\"admin\")\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\namcat.list_indices()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[{'name': 'state_of_the_union', 'role': 'ADMIN'}, {'name': 'new_index', 'role': 'ADMIN'}]\n```\n:::\n\n```{.python .cell-code}\namcat.get_fields(\"new_index\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'date': {'name': 'date', 'type': 'date'}, 'text': {'name': 'text', 'type': 'text'}, 'title': {'name': 'title', 'type': 'text'}, 'url': {'name': 'url', 'type': 'url', 'meta': {'amcat4_type': 'url'}}}\n```\n:::\n:::\n\n\n#### cURL\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncurl -s -X POST http://localhost/api/index/ \\\n  -H \"Authorization: Bearer ${AMCAT_TOKEN}\" \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"name\": \"new_index\",\n        \"guest_role\": \"ADMIN\"\n      }'\n```\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\ncurl -s http://localhost/api/index/ \\\n  -H \"Authorization: Bearer ${AMCAT_TOKEN}\"\ncurl -s http://localhost/api/index/new_index/fields \\\n  -H \"Authorization: Bearer ${AMCAT_TOKEN}\"\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n[{\"name\":\"state_of_the_union\",\"role\":\"ADMIN\"},{\"name\":\"new_index\",\"role\":\"ADMIN\"}]{\"date\":{\"name\":\"date\",\"type\":\"date\"},\"text\":{\"name\":\"text\",\"type\":\"text\"},\"title\":{\"name\":\"title\",\"type\":\"text\"},\"url\":{\"name\":\"url\",\"type\":\"url\",\"meta\":{\"amcat4_type\":\"url\"}}}\n```\n:::\n:::\n\n\n:::\n\nAs you can see, the newly created index already contains fields.\nYou could now manually define new fields to fit your data.\nOr you can simply start uploading data:\n\n::: {.panel-tabset}\n\n#### R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_doc <- data.frame(\n  title = \"test\",\n  text = \"test\",\n  date = as.Date(\"2022-01-01\"),\n  president = \"test\",\n  year = \"2022\",\n  party = \"test\",\n  url = \"test\"\n)\nupload_documents(index = \"new_index\", new_doc)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nget_fields(index = \"new_index\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 7 × 2\n  name      type \n  <chr>     <chr>\n1 date      date \n2 party     text \n3 president text \n4 text      text \n5 title     text \n6 url       url  \n7 year      text \n```\n:::\n:::\n\n\n#### Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\nnew_doc = {\n  \"title\": \"test\",\n  \"text\": \"test\",\n  \"date\": datetime.strptime(\"2022-01-01\", '%Y-%m-%d'),\n  \"president\": \"test\",\n  \"year\": \"2022\",\n  \"party\": \"test\",\n  \"url\": \"test\"\n}\namcat.upload_documents(\"new_index\", [new_doc])\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\namcat.get_fields(\"new_index\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'date': {'name': 'date', 'type': 'date'}, 'party': {'name': 'party', 'type': 'text'}, 'president': {'name': 'president', 'type': 'text'}, 'text': {'name': 'text', 'type': 'text'}, 'title': {'name': 'title', 'type': 'text'}, 'url': {'name': 'url', 'type': 'url', 'meta': {'amcat4_type': 'url'}}, 'year': {'name': 'year', 'type': 'text'}}\n```\n:::\n:::\n\n\n\n#### cURL\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncurl -s -X POST http://localhost/api/index/new_index/documents \\\n  -H \"Authorization: Bearer ${AMCAT_TOKEN}\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n         \"documents\":[\n            {\n               \"title\":\"test\",\n               \"text\":\"test\",\n               \"date\":\"2022-01-01\",\n               \"president\":\"test\",\n               \"year\":\"2022\",\n               \"party\":\"test\",\n               \"url\":\"test\"\n            }\n         ]\n      }'\n```\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\ncurl -s http://localhost/api/index/new_index/fields \\\n  -H \"Authorization: Bearer ${AMCAT_TOKEN}\"\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n{\"date\":{\"name\":\"date\",\"type\":\"date\"},\"party\":{\"name\":\"party\",\"type\":\"text\"},\"president\":{\"name\":\"president\",\"type\":\"text\"},\"text\":{\"name\":\"text\",\"type\":\"text\"},\"title\":{\"name\":\"title\",\"type\":\"text\"},\"url\":{\"name\":\"url\",\"type\":\"url\",\"meta\":{\"amcat4_type\":\"url\"}},\"year\":{\"name\":\"year\",\"type\":\"text\"}}\n```\n:::\n:::\n\n\n:::\n\n`amcat4` guesses the types of fields based on the data.\nYou can see here that this might not be the best option if you care about data types: party and president have been created as text, when they should be keywords; year is now a long type instead of double or integer. \n<!-- TODO: Why should people care about types? -->\n\nFinally, we can also delete an index:\n\n::: {.panel-tabset}\n\n#### R\n\n::: {.cell}\n\n```{.r .cell-code}\ndelete_index(index = \"new_index\")\n```\n:::\n\n\n#### Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\namcat.delete_index(\"new_index\")\n```\n:::\n\n\n#### cURL\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncurl -s -X DELETE http://localhost/api/index/new_index \\\n  -H \"Authorization: Bearer ${AMCAT_TOKEN}\"\n```\n:::\n\n:::\n",
    "supporting": [
      "03._storage_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}