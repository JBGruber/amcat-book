{
  "hash": "07e74581e0c2fbc15361671d907aa09a",
  "result": {
    "markdown": "---\ntitle: \"Document Storage\"\nexecute:\n  freeze: auto\nbibliography: references.bib\n---\n\n\n\n::: {.callout-note}\nYou need at least the modules in the Data Layer and one Frontend Client to work with document storage:\n\n![amcat instance after following this chapter](media/amcat-flow-getting-started.drawio.png)\n\n:::\n\nThis chapter covers how you can upload, change, query and delete documents and indexes on the amcat server.\nOnly a few tasks are implemented in the [Web user interface](#manage-documents-with-a-client), which means you will need to use [one of the clients](#manage-documents-with-a-client) in `R` or `Python` or another means to call the API (e.g., through [cURL](https://en.wikipedia.org/wiki/CURL) as shown below).\nYou can also use the API calls to build your own client.\nMore information on the API can be found on every amcat4 instance at `/redoc` (e.g., <http://localhost/amcat/redoc>).\nLet us know about it and we will promote your new API wrapper package here.\n\n## Manage Documents With the Web Interface\n\n::: {.callout-important}\n# Coming soon...\n:::\n\n::: {.callout-important}\n# Will change soon\n\nCurrently, there is no way to upload, change, or delete documents and indexes through the web interface.\nRather, you can add new datasets through [calls to the amcat API](#manage-documents-with-a-client).\n:::\n\n## Manage Documents With a Client\n\nFor this overview, we log into a local `amcat4` (i.e., `http://localhost/amcat`).\nReplace this with the address to the `amcat4` instance you are working with (e.g., `https://opted.amcat.nl/api`).\n\nWe first need to log in:\n\n\n::: {.panel-tabset}\n#### R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(amcat4r)\namcat_login(\"http://localhost/amcat\")\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n#### Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom amcat4py import AmcatClient\namcat = AmcatClient(\"http://localhost/amcat\")\nif amcat.login_required():\n    amcat.login()\n```\n:::\n\n\n\n#### cURL\n\nThere is no dedicated way at the moment to get a token via cURL.\nYou can still use cURL with instances that do not require authentication or by copying the token from `Python` or `R`.\nIn these cases, you can make requests with an extra header, for example:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nAMCAT_TOKEN=\"YOUR_TOKEN\"\ncurl -s http://localhost/amcat/index/ \\\n  -H \"Authorization: Bearer ${AMCAT_TOKEN}\"\n```\n:::\n\n\n:::\n\nWe can first list all available indexes, as a document collection is called in Elasticsearch and thus in amcat:\n\n::: {.panel-tabset}\n\n#### R\n\n::: {.cell}\n\n```{.r .cell-code}\nlist_indexes()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n  name              \n  <chr>             \n1 state_of_the_union\n```\n:::\n:::\n\n\n#### Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\namcat.list_indices()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[{'name': 'state_of_the_union'}]\n```\n:::\n:::\n\n\n#### cURL\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncurl -s http://localhost/amcat/index/\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n[{\"name\":\"state_of_the_union\"}]\n```\n:::\n:::\n\n:::\n\nYou can see that the test index we added in the [Data Layer](#data-layer) section is here and that it is called \"state_of_the_union\".\n<!-- The `role` information here refers to the guest role, which means what access to the index a user has if they are granted no specific rights. -->\n<!-- For this special case of an index, a guest user can do everything to this index, including deleting in. -->\nTo see everyone who has been granted access to an index we can use:\n\n::: {.panel-tabset}\n\n#### R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist_index_users(index = \"state_of_the_union\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 0 × 0\n```\n:::\n:::\n\n\n#### Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\namcat.list_index_users(index=\"state_of_the_union\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[]\n```\n:::\n:::\n\n\n#### cURL\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncurl -s http://localhost/amcat/index/state_of_the_union/users\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n[]\n```\n:::\n:::\n\n:::\n\nWe will learn more about these roles in the chapter on [access management](#document-sharing-and-access-management).\nTo see what an index looks like, we can query it leaving all fields blank to request all data at once:\n\n::: {.panel-tabset}\n\n#### R\n\n::: {.cell}\n\n```{.r .cell-code}\nsotu <- query_documents(index = \"state_of_the_union\", queries = NULL, fields = NULL)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRetrieved 232 results in 1 pages\n```\n:::\n\n```{.r .cell-code}\nstr(sotu)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntibble [232 × 7] (S3: tbl_df/tbl/data.frame)\n $ .id      : 'id_col' chr [1:232] \"56c03f73a4061d4d9eca2cec71938407556d26864b08ce330858c0da\" \"a4fbf3c9ee99d7bcba1639b01fabe48f203d489088e172029463e5f7\" \"cc39f6ccc68078288cca2a6f585a701f75ae4f7f3c572f56aeef0511\" \"66865d7f9c6e77202555cf5f43f71ab0bc424a0b7d33d810c3e058ea\" ...\n $ title    : chr [1:232] \"1790: George Washington\" \"1790: George Washington\" \"1791: George Washington\" \"1792: George Washington\" ...\n $ text     : chr [1:232] \"Fellow-Citizens of the Senate and House of Representatives:  \\nI embrace with great satisfaction the opportunit\"| __truncated__ \"Fellow-Citizens of the Senate and House of Representatives:  \\nIn meeting you again I feel much satisfaction in\"| __truncated__ \"Fellow-Citizens of the Senate and House of Representatives:  \\n\\\"In vain may we expect peace with the Indians o\"| __truncated__ \"Fellow-Citizens of the Senate and House of Representatives:  \\nIt is some abatement of the satisfaction with wh\"| __truncated__ ...\n $ date     : POSIXlt[1:232], format: NA NA ...\n $ president: chr [1:232] \"George Washington\" \"George Washington\" \"George Washington\" \"George Washington\" ...\n $ year     : num [1:232] 1790 1790 1791 1792 1793 ...\n $ party    : chr [1:232] \"N/A\" \"N/A\" \"N/A\" \"N/A\" ...\n```\n:::\n:::\n\n\n#### Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\nsotu = list(amcat.query(\"state_of_the_union\", fields=None))\nprint(len(sotu))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n232\n```\n:::\n\n```{.python .cell-code}\nfor k, v in sotu[1].items():\n  print(k + \"(\" + str(type(v)) + \"): \" + str(v)[0:100] + \"...\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n_id(<class 'str'>): a4fbf3c9ee99d7bcba1639b01fabe48f203d489088e172029463e5f7...\ntitle(<class 'str'>): 1790: George Washington...\ntext(<class 'str'>): Fellow-Citizens of the Senate and House of Representatives:  \nIn meeting you again I feel much satis...\ndate(<class 'datetime.datetime'>): 1790-12-08 00:00:00...\npresident(<class 'str'>): George Washington...\nyear(<class 'float'>): 1790.0...\nparty(<class 'str'>): N/A...\n```\n:::\n:::\n\n\n#### cURL\n\nTo not clog the output, we save it into file and display only the beginning:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncurl -s http://localhost/amcat/index/state_of_the_union/documents > sotu.json\n# show the first few characters only\nhead -c 150 sotu.json\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n{\"results\":[{\"_id\":\"56c03f73a4061d4d9eca2cec71938407556d26864b08ce330858c0da\",\"title\":\"1790: George Washington\",\"text\":\"Fellow-Citizens of the Senate \n```\n:::\n:::\n\n\n\n\n:::\n\nKnowing now what a document should look like in this index, we can upload a new document to get familiar with the process:\n\n::: {.panel-tabset}\n\n#### R\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_doc <- data.frame(\n  title = \"test\",\n  text = \"test\",\n  date = as.Date(\"2022-01-01\"),\n  president = \"test\",\n  year = \"2022\",\n  party = \"test\",\n  url = \"test\"\n)\nupload_documents(index = \"state_of_the_union\", new_doc)\n```\n:::\n\n\n\n\n#### Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom datetime import datetime\nnew_doc = {\n  \"title\": \"test\",\n  \"text\": \"test\",\n  \"date\": datetime.strptime(\"2022-01-01\", '%Y-%m-%d'),\n  \"president\": \"test\",\n  \"year\": \"2022\",\n  \"party\": \"test\",\n  \"url\": \"test\"\n}\namcat.upload_documents(\"state_of_the_union\", [new_doc])\n```\n:::\n\n\n#### cURL\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncurl -s -X POST http://localhost/amcat/index/state_of_the_union/documents \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n         \"documents\":[\n            {\n               \"title\":\"test\",\n               \"text\":\"test\",\n               \"date\":\"2022-01-01\",\n               \"president\":\"test\",\n               \"year\":\"2022\",\n               \"party\":\"test\",\n               \"url\":\"test\"\n            }\n         ]\n      }'\n```\n:::\n\n:::\n\nLet's see if the the new document is in the index:\n\n::: {.panel-tabset}\n\n#### R\n\n::: {.cell}\n\n```{.r .cell-code}\nquery_documents(index = \"state_of_the_union\", fields = NULL, filters = list(title = \"test\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRetrieved 1 results in 1 pages\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 8\n  .id      title date   text  url   president  year party\n  <id_col> <chr> <dttm> <chr> <chr> <chr>     <dbl> <chr>\n1 588…390  test  NA     test  test  test       2022 test \n```\n:::\n:::\n\n\n#### Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pprint\npp = pprint.PrettyPrinter(depth=4)\nres=list(amcat.query(\"state_of_the_union\", fields=None, filters={\"title\": \"test\"}))\npp.pprint(res)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[{'_id': '588ce5734aaaa884e636118df8c7b0a64f7423e5e90657d618d1b390',\n  'date': datetime.datetime(2022, 1, 1, 0, 0),\n  'party': 'test',\n  'president': 'test',\n  'text': 'test',\n  'title': 'test',\n  'url': 'test',\n  'year': 2022.0}]\n```\n:::\n:::\n\n\n#### cURL\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncurl -s -X POST http://localhost/amcat/index/state_of_the_union/query \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"filters\":{\"title\":[\"test\"]}}' | jq -r \".results\"\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n[\n  {\n    \"_id\": \"588ce5734aaaa884e636118df8c7b0a64f7423e5e90657d618d1b390\",\n    \"title\": \"test\",\n    \"date\": \"2022-01-01\",\n    \"text\": \"test\",\n    \"url\": \"test\",\n    \"president\": \"test\",\n    \"year\": 2022,\n    \"party\": \"test\"\n  }\n]\n```\n:::\n:::\n\n:::\n\nWe will learn more about queries later on in the [Writing a Query]() chapter.\n\nInstead of adding whole documents, you can also change fields in an index.\nFields are similar to columns in a table in Excel.\nHowever, you need to define the type of a field upon its creation and make sure that you later only add data which adheres to the specifications of the type (otherwise you will get an error).\nTo learn more about the fields in the test index, you can use:\n\n::: {.panel-tabset}\n\n#### R\n\n::: {.cell}\n\n```{.r .cell-code}\nget_fields(index = \"state_of_the_union\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 7 × 2\n  name      type   \n  <chr>     <chr>  \n1 date      date   \n2 party     keyword\n3 president keyword\n4 text      text   \n5 title     text   \n6 url       url    \n7 year      double \n```\n:::\n:::\n\n\n#### Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\namcat.get_fields(\"state_of_the_union\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'date': {'name': 'date', 'type': 'date'}, 'party': {'name': 'party', 'type': 'keyword'}, 'president': {'name': 'president', 'type': 'keyword'}, 'text': {'name': 'text', 'type': 'text'}, 'title': {'name': 'title', 'type': 'text'}, 'url': {'name': 'url', 'type': 'url', 'meta': {'amcat4_type': 'url'}}, 'year': {'name': 'year', 'type': 'double'}}\n```\n:::\n:::\n\n\n#### cURL\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncurl -s http://localhost/amcat/index/state_of_the_union/fields\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n{\"date\":{\"name\":\"date\",\"type\":\"date\"},\"party\":{\"name\":\"party\",\"type\":\"keyword\"},\"president\":{\"name\":\"president\",\"type\":\"keyword\"},\"text\":{\"name\":\"text\",\"type\":\"text\"},\"title\":{\"name\":\"title\",\"type\":\"text\"},\"url\":{\"name\":\"url\",\"type\":\"url\",\"meta\":{\"amcat4_type\":\"url\"}},\"year\":{\"name\":\"year\",\"type\":\"double\"}}\n```\n:::\n:::\n\n:::\n\nYou can see that there are five different types in this index: date, keyword, text, url and double.\nKeyword, text, url are all essentially the same type in `R`, namely character strings.\nThe date needs to be a `POSIXct` class, which you can create with `as.Date`.\nYear should be a double, i.e., a numeric value or integer.\n\nYou can add new fields to this, for example, if you want to add a keyword to the documents:\n\n::: {.panel-tabset}\n\n#### R\n\n::: {.cell}\n\n```{.r .cell-code}\nset_fields(index = \"state_of_the_union\", list(keyword = \"keyword\"))\n```\n:::\n\n\n#### Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\namcat.set_fields(\"state_of_the_union\", {\"keyword\":\"keyword\"})\n```\n:::\n\n\n#### cURL\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncurl -s -X POST http://localhost/amcat/index/state_of_the_union/fields \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"keyword\":\"keyword\"}'\n```\n:::\n\n:::\n\nWhen you now query a document, however, you will not see this new field:\n\n::: {.panel-tabset}\n\n#### R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nquery_documents(index = \"state_of_the_union\", fields = NULL, filters = list(title = \"test\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRetrieved 1 results in 1 pages\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 8\n  .id      title date   text  url   president  year party\n  <id_col> <chr> <dttm> <chr> <chr> <chr>     <dbl> <chr>\n1 588…390  test  NA     test  test  test       2022 test \n```\n:::\n:::\n\n\n#### Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\nres = list(amcat.query(\"state_of_the_union\", fields=None, filters={\"title\": \"test\"}))\npp.pprint(res)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[{'_id': '588ce5734aaaa884e636118df8c7b0a64f7423e5e90657d618d1b390',\n  'date': datetime.datetime(2022, 1, 1, 0, 0),\n  'party': 'test',\n  'president': 'test',\n  'text': 'test',\n  'title': 'test',\n  'url': 'test',\n  'year': 2022.0}]\n```\n:::\n:::\n\n\n#### cURL\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncurl -s -X POST http://localhost/amcat/index/state_of_the_union/query \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"filters\":{\"title\":[\"test\"]}}' | jq -r \".results\"\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n[\n  {\n    \"_id\": \"588ce5734aaaa884e636118df8c7b0a64f7423e5e90657d618d1b390\",\n    \"title\": \"test\",\n    \"date\": \"2022-01-01\",\n    \"text\": \"test\",\n    \"url\": \"test\",\n    \"president\": \"test\",\n    \"year\": 2022,\n    \"party\": \"test\"\n  }\n]\n```\n:::\n:::\n\n:::\n\nThis is because it is empty for this document, just as the url field, which is absent from all documents in this index.\nWe can add something to the new field and see if it shows up:\n\n::: {.panel-tabset}\n\n#### R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nupdate_tags(index = \"state_of_the_union\", \n            action = \"add\", \n            field = \"keyword\", \n            tag = \"test\", \n            filters = list(title = \"test\"))\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nquery_documents(index = \"state_of_the_union\", \n                fields = c(\"title\", \"keyword\"),\n                filters = list(title = \"test\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRetrieved 1 results in 1 pages\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 3\n  .id      title keyword  \n  <id_col> <chr> <list>   \n1 588…390  test  <chr [1]>\n```\n:::\n:::\n\n\n#### Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\ntest_doc = list(amcat.query(\"state_of_the_union\", fields=[\"id\"], filters={\"title\": \"test\"}))[0]\namcat.update_document(\"state_of_the_union\", doc_id=test_doc[\"_id\"], body={\"keyword\": \"test\"})\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nres=list(amcat.query(\"state_of_the_union\", fields=[\"title\", \"keyword\"], filters={\"title\": \"test\"}))\npp.pprint(res)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[{'_id': '588ce5734aaaa884e636118df8c7b0a64f7423e5e90657d618d1b390',\n  'keyword': ['test'],\n  'title': 'test'}]\n```\n:::\n:::\n\n\n#### cURL\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ntest_doc=$(curl -s -X POST http://localhost/amcat/index/state_of_the_union/query \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"filters\":{\"title\":[\"test\"]}}' | jq -r \".results[]._id\")\ncurl -s -X PUT http://localhost/amcat/index/state_of_the_union/documents/${test_doc} \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"keyword\": \"test\"}'\n```\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\ncurl -s -X POST http://localhost/amcat/index/state_of_the_union/query \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"filters\":{\"title\":[\"test\"]}}' | jq -r \".results\"\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n[\n  {\n    \"_id\": \"588ce5734aaaa884e636118df8c7b0a64f7423e5e90657d618d1b390\",\n    \"date\": \"2022-01-01\",\n    \"year\": 2022,\n    \"text\": \"test\",\n    \"title\": \"test\",\n    \"keyword\": [\n      \"test\"\n    ],\n    \"url\": \"test\",\n    \"party\": \"test\",\n    \"president\": \"test\"\n  }\n]\n```\n:::\n:::\n\n:::\n\nNow that we have a better idea of what an index is and how it looks like, we can create a new one>\n\n::: {.panel-tabset}\n\n#### R\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncreate_index(index = \"new_index\", guest_role = \"admin\")\nlist_indexes()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 1\n  name              \n  <chr>             \n1 state_of_the_union\n2 new_index         \n```\n:::\n\n```{.r .cell-code}\nget_fields(index = \"new_index\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 2\n  name  type \n  <chr> <chr>\n1 date  date \n2 text  text \n3 title text \n4 url   url  \n```\n:::\n:::\n\n\n#### Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\namcat.create_index(index=\"new_index\", guest_role=\"admin\")\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\namcat.list_indices()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[{'name': 'state_of_the_union'}, {'name': 'new_index'}]\n```\n:::\n\n```{.python .cell-code}\namcat.get_fields(\"new_index\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'date': {'name': 'date', 'type': 'date'}, 'text': {'name': 'text', 'type': 'text'}, 'title': {'name': 'title', 'type': 'text'}, 'url': {'name': 'url', 'type': 'url', 'meta': {'amcat4_type': 'url'}}}\n```\n:::\n:::\n\n\n#### cURL\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncurl -s -X POST http://localhost/amcat/index/ \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n        \"name\": \"new_index\",\n        \"guest_role\": \"ADMIN\"\n      }'\n```\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\ncurl -s http://localhost/amcat/index/\ncurl -s http://localhost/amcat/index/new_index/fields\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n[{\"name\":\"state_of_the_union\"},{\"name\":\"new_index\"}]{\"date\":{\"name\":\"date\",\"type\":\"date\"},\"text\":{\"name\":\"text\",\"type\":\"text\"},\"title\":{\"name\":\"title\",\"type\":\"text\"},\"url\":{\"name\":\"url\",\"type\":\"url\",\"meta\":{\"amcat4_type\":\"url\"}}}\n```\n:::\n:::\n\n\n:::\n\nAs you can see, the newly created index already contains fields.\nYou could now manually define new fields to fit your data.\nOr you can simply start uploading data:\n\n::: {.panel-tabset}\n\n#### R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_doc <- data.frame(\n  title = \"test\",\n  text = \"test\",\n  date = as.Date(\"2022-01-01\"),\n  president = \"test\",\n  year = \"2022\",\n  party = \"test\",\n  url = \"test\"\n)\nupload_documents(index = \"new_index\", new_doc)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nget_fields(index = \"new_index\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 7 × 2\n  name      type \n  <chr>     <chr>\n1 date      date \n2 party     text \n3 president text \n4 text      text \n5 title     text \n6 url       url  \n7 year      text \n```\n:::\n:::\n\n\n#### Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\nnew_doc = {\n  \"title\": \"test\",\n  \"text\": \"test\",\n  \"date\": datetime.strptime(\"2022-01-01\", '%Y-%m-%d'),\n  \"president\": \"test\",\n  \"year\": \"2022\",\n  \"party\": \"test\",\n  \"url\": \"test\"\n}\namcat.upload_documents(\"new_index\", [new_doc])\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\namcat.get_fields(\"new_index\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'date': {'name': 'date', 'type': 'date'}, 'party': {'name': 'party', 'type': 'text'}, 'president': {'name': 'president', 'type': 'text'}, 'text': {'name': 'text', 'type': 'text'}, 'title': {'name': 'title', 'type': 'text'}, 'url': {'name': 'url', 'type': 'url', 'meta': {'amcat4_type': 'url'}}, 'year': {'name': 'year', 'type': 'text'}}\n```\n:::\n:::\n\n\n\n#### cURL\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncurl -s -X POST http://localhost/amcat/index/new_index/documents \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n         \"documents\":[\n            {\n               \"title\":\"test\",\n               \"text\":\"test\",\n               \"date\":\"2022-01-01\",\n               \"president\":\"test\",\n               \"year\":\"2022\",\n               \"party\":\"test\",\n               \"url\":\"test\"\n            }\n         ]\n      }'\n```\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\ncurl -s http://localhost/amcat/index/new_index/fields\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n{\"date\":{\"name\":\"date\",\"type\":\"date\"},\"party\":{\"name\":\"party\",\"type\":\"text\"},\"president\":{\"name\":\"president\",\"type\":\"text\"},\"text\":{\"name\":\"text\",\"type\":\"text\"},\"title\":{\"name\":\"title\",\"type\":\"text\"},\"url\":{\"name\":\"url\",\"type\":\"url\",\"meta\":{\"amcat4_type\":\"url\"}},\"year\":{\"name\":\"year\",\"type\":\"text\"}}\n```\n:::\n:::\n\n\n:::\n\n`amcat4` guesses the types of fields based on the data.\nYou can see here that this might not be the best option if you care about data types: party and president have been created as text, when they should be keywords; year is now a long type instead of double or integer. \n<!-- TODO: Why should people care about types? -->\n\nFinally, we can also delete an index:\n\n::: {.panel-tabset}\n\n#### R\n\n::: {.cell}\n\n```{.r .cell-code}\ndelete_index(index = \"new_index\")\n```\n:::\n\n\n#### Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\namcat.delete_index(\"new_index\")\n```\n:::\n\n\n#### cURL\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncurl -s -X DELETE http://localhost/amcat/index/new_index\n```\n:::\n\n:::\n\n### A Note on the ID Field and Duplicated Documents\n\namcat indexes can have all kinds of fields, yet one special field must be present in every document of every index: a unique ID.\nThis ID is usually not that noteworthy, since the user does not really need to take care of it.\nThis changes, however, with the special case of duplicated documents, that is, a document with the exact same information in the same fields.\namcat does not normally check if your documents are duplicated when you upload them.\nHowever, when no ID is present in an uploaded document, as in the example we uploaded above, amcat will construct a unique ID from the available data of a document.\nLet us have another look at that document we titled \"test\":\n\n::: {.panel-tabset}\n\n#### R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nquery_documents(index = \"state_of_the_union\", fields = NULL, filters = list(title = \"test\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRetrieved 1 results in 1 pages\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 9\n  .id      date    year text  title keyword   url   party president\n  <id_col> <dttm> <dbl> <chr> <chr> <list>    <chr> <chr> <chr>    \n1 588…390  NA      2022 test  test  <chr [1]> test  test  test     \n```\n:::\n:::\n\n\n#### Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\nres=list(amcat.query(\"state_of_the_union\", fields=None, filters={\"title\": \"test\"}))\npp.pprint(res)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[{'_id': '588ce5734aaaa884e636118df8c7b0a64f7423e5e90657d618d1b390',\n  'date': datetime.datetime(2022, 1, 1, 0, 0),\n  'keyword': ['test'],\n  'party': 'test',\n  'president': 'test',\n  'text': 'test',\n  'title': 'test',\n  'url': 'test',\n  'year': 2022.0}]\n```\n:::\n:::\n\n\n#### cURL\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncurl -s -X POST http://localhost/amcat/index/state_of_the_union/query \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"filters\":{\"title\":[\"test\"]}}' | jq -r \".results\"\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n[\n  {\n    \"_id\": \"588ce5734aaaa884e636118df8c7b0a64f7423e5e90657d618d1b390\",\n    \"date\": \"2022-01-01\",\n    \"year\": 2022,\n    \"text\": \"test\",\n    \"title\": \"test\",\n    \"keyword\": [\n      \"test\"\n    ],\n    \"url\": \"test\",\n    \"party\": \"test\",\n    \"president\": \"test\"\n  }\n]\n```\n:::\n:::\n\n:::\n\nNote that amcat has automatically added an `_id` field (in `R` it is `.id` due to naming conventions) to the document.\nIf we would upload the same document again, the algorithm that constructs the `_id` field would come up with the same value and the document would be replaced by the newly uploaded document.\nIf we wanted to keep a duplicate for some reason, we could accomplish that by either changing at least one value in a field or by assigning an ID column manually:\n\n::: {.panel-tabset}\n\n#### R\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_doc <- data.frame(\n  .id = \"1\",\n  title = \"test\",\n  text = \"test\",\n  date = as.Date(\"2022-01-01\"),\n  president = \"test\",\n  year = \"2022\",\n  party = \"test\",\n  url = \"test\"\n)\nupload_documents(index = \"state_of_the_union\", new_doc)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nquery_documents(index = \"state_of_the_union\", fields = NULL, filters = list(title = \"test\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRetrieved 2 results in 1 pages\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 9\n  .id      date    year text  title keyword   url   party president\n  <id_col> <dttm> <dbl> <chr> <chr> <list>    <chr> <chr> <chr>    \n1 588…390  NA      2022 test  test  <chr [1]> test  test  test     \n2 1        NA      2022 test  test  <NULL>    test  test  test     \n```\n:::\n:::\n\n\n#### Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom datetime import datetime\nnew_doc = {\n  \"_id\": \"1\",\n  \"title\": \"test\",\n  \"text\": \"test\",\n  \"date\": datetime.strptime(\"2022-01-01\", '%Y-%m-%d'),\n  \"president\": \"test\",\n  \"year\": \"2022\",\n  \"party\": \"test\",\n  \"url\": \"test\"\n}\namcat.upload_documents(\"state_of_the_union\", [new_doc])\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nres=list(amcat.query(\"state_of_the_union\", fields=None, filters={\"title\": \"test\"}))\npp.pprint(res)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[{'_id': '588ce5734aaaa884e636118df8c7b0a64f7423e5e90657d618d1b390',\n  'date': datetime.datetime(2022, 1, 1, 0, 0),\n  'keyword': ['test'],\n  'party': 'test',\n  'president': 'test',\n  'text': 'test',\n  'title': 'test',\n  'url': 'test',\n  'year': 2022.0},\n {'_id': '1',\n  'date': datetime.datetime(2022, 1, 1, 0, 0),\n  'party': 'test',\n  'president': 'test',\n  'text': 'test',\n  'title': 'test',\n  'url': 'test',\n  'year': 2022.0}]\n```\n:::\n:::\n\n\n\n#### cURL\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncurl -s -X POST http://localhost/amcat/index/state_of_the_union/documents \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"documents\":[\n          {\n            \"_id\": \"1\",\n            \"title\":\"test\",\n            \"text\":\"test\",\n            \"date\":\"2022-01-01\",\n            \"president\":\"test\",\n            \"year\":\"2022\",\n            \"party\":\"test\",\n            \"url\":\"test\"\n          }\n        ]\n      }'\n```\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\ncurl -s -X POST http://localhost/amcat/index/state_of_the_union/query \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"filters\":{\"title\":[\"test\"]}}' | jq -r \".results\"\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n[\n  {\n    \"_id\": \"588ce5734aaaa884e636118df8c7b0a64f7423e5e90657d618d1b390\",\n    \"date\": \"2022-01-01\",\n    \"year\": 2022,\n    \"text\": \"test\",\n    \"title\": \"test\",\n    \"keyword\": [\n      \"test\"\n    ],\n    \"url\": \"test\",\n    \"party\": \"test\",\n    \"president\": \"test\"\n  },\n  {\n    \"_id\": \"1\",\n    \"title\": \"test\",\n    \"date\": \"2022-01-01\",\n    \"text\": \"test\",\n    \"url\": \"test\",\n    \"year\": 2022,\n    \"party\": \"test\",\n    \"president\": \"test\"\n  }\n]\n```\n:::\n:::\n\n:::\n\nAs you can see, we now have the example document in the index twice -- although with different IDs.\nTo simulate what would have happened without an ID, or rather if the ID had been constructed automatically, we can upload different data, but with the same ID to see what changes:\n\n::: {.panel-tabset}\n\n#### R\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_doc <- data.frame(\n  .id = \"1\",\n  title = \"test\",\n  text = \"A second test\",\n  date = as.Date(\"2022-01-02\"),\n  president = \"test\",\n  year = \"2022\"\n)\nupload_documents(index = \"state_of_the_union\", new_doc)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nquery_documents(index = \"state_of_the_union\", fields = NULL, filters = list(title = \"test\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRetrieved 2 results in 1 pages\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 9\n  .id      date    year text          title keyword   url   party president\n  <id_col> <dttm> <dbl> <chr>         <chr> <list>    <chr> <chr> <chr>    \n1 588…390  NA      2022 test          test  <chr [1]> test  test  test     \n2 1        NA      2022 A second test test  <NULL>    <NA>  <NA>  test     \n```\n:::\n:::\n\n\n#### Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom datetime import datetime\nnew_doc = {\n  \"_id\": \"1\",\n  \"title\": \"test\",\n  \"text\": \"A second test\",\n  \"date\": datetime.strptime(\"2022-01-02\", '%Y-%m-%d'),\n  \"president\": \"test\",\n  \"year\": \"2022\"\n}\namcat.upload_documents(\"state_of_the_union\", [new_doc])\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nres=list(amcat.query(\"state_of_the_union\", fields=None, filters={\"title\": \"test\"}))\npp.pprint(res)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[{'_id': '588ce5734aaaa884e636118df8c7b0a64f7423e5e90657d618d1b390',\n  'date': datetime.datetime(2022, 1, 1, 0, 0),\n  'keyword': ['test'],\n  'party': 'test',\n  'president': 'test',\n  'text': 'test',\n  'title': 'test',\n  'url': 'test',\n  'year': 2022.0},\n {'_id': '1',\n  'date': datetime.datetime(2022, 1, 2, 0, 0),\n  'president': 'test',\n  'text': 'A second test',\n  'title': 'test',\n  'year': 2022.0}]\n```\n:::\n:::\n\n\n#### cURL\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncurl -s -X POST http://localhost/amcat/index/state_of_the_union/documents \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"documents\":[\n          {\n            \"_id\": \"1\",\n            \"title\":\"test\",\n            \"text\":\"A second test\",\n            \"date\":\"2022-01-02\",\n            \"president\":\"test\",\n            \"year\":\"2022\"\n          }\n        ]\n      }'\n```\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\ncurl -s -X POST http://localhost/amcat/index/state_of_the_union/query \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"filters\":{\"title\":[\"test\"]}}' | jq -r \".results\"\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n[\n  {\n    \"_id\": \"588ce5734aaaa884e636118df8c7b0a64f7423e5e90657d618d1b390\",\n    \"date\": \"2022-01-01\",\n    \"year\": 2022,\n    \"text\": \"test\",\n    \"title\": \"test\",\n    \"keyword\": [\n      \"test\"\n    ],\n    \"url\": \"test\",\n    \"party\": \"test\",\n    \"president\": \"test\"\n  },\n  {\n    \"_id\": \"1\",\n    \"title\": \"test\",\n    \"date\": \"2022-01-02\",\n    \"text\": \"A second test\",\n    \"president\": \"test\",\n    \"year\": 2022\n  }\n]\n```\n:::\n:::\n\n:::\n\nThe document with the ID 1 has been replaced with the new data.\nThis is the normal behaviour of amcat: when we tell it to add data to an already present document, identified by the ID, it will be replaced.\nIf a field was present in the old document, but not in the data it is replaced with, this field will be empty afterwards.\n\n",
    "supporting": [
      "03._storage_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}