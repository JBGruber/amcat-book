---
title: "Getting started"
---

::: {.callout-important}
# Will change soon
**This is work in progress.**
Passages highlighted in red are likely to change soon.
:::

In this chapter, we show you how to set up the data layer and front-end of the amcat suite.

![amcat instance after following this chapter](media/amcat-flow-getting-started.drawio.png)

In the [Data Layer](#data-Layer) section, it is sufficient if you choose one of the sub-sections to follow.
We explain how you can run amcat 

- [on our servers](#run-on-our-servers), which we recommend for testing purposes;
- [through a Docker image](#setup-through-docker), which we recommend for most people who want to conduct a research project and/or share data online;
- [or install amcat directly on your system](#setup-on-your-own-server), which we only recommend for advanced users, who want a customised setup.

In the [Frontend](#frontend) section, it makes sense to cover the [amcat4client](#amcat4client), which provides a react web interface to query data.
Then you can select to either install the [R](#amcat4r) or [Python](#amcat4apiclient) client.

## Data Layer
### Run on our servers

::: {.callout-important}
# Coming soon...
:::

### Setup through Docker

::: {.callout-tip}
# Why do we use Docker for installation?
Functionally, Docker containers are a cross-platform installation format that makes it trivially easy to install software packages on Linux, MacOS and Windows without needing users to deal with dependency issues or installation quirks on different systems.^[
Technically, it is a little more complicated, as Docker containers have many similarities to virtual machines.
However, for most users that technical background is not really important.
If you want to learn more, have a look [here](https://www.docker.com/resources/what-container/).
]
A side effect is that we can easily develop amcat for all operating systems at once and you can be sure that we do not fall behind on developing amcat for your operating system of choice.
:::

If you have never used Docker before, the first step is to install the infrastructure on your system.
Head over to the Docker website to get [Docker Desktop](https://docs.docker.com/get-docker/) or just the [Docker Engine](https://docs.docker.com/engine/install/) to use Docker from the command line.

To install the amcat data layer, you should use our Docker Compose file.
You can get it from [here](https://raw.githubusercontent.com/JBGruber/amcat4docker/main/docker-compose.yml).
Now you have two options to set this up, which are explained in the next two sections:
you can use  [Docker Desktop](#setup-from-docker-desktop) to change the default configuration to meet your needs, or you can edit the Docker Compose file in a text editor and [use the command line to run our containers](#setup-from-command-line).
You can also mix the approach and edit the Docker Compose file before running it through the Desktop application.

#### Setup from Docker Desktop

::: {.callout-important}
# Coming soon...
:::

#### Setup from command line

The current default docker-compose.yml looks like this:

```{r}
#| echo: false
docker_compose <- readLines("https://raw.githubusercontent.com/JBGruber/amcat4docker/main/docker-compose.yml")
knitr::asis_output(paste0(
  "``` {.bash code-line-numbers=\"true\"}\n",
  paste0(
    docker_compose,
    collapse = "\n"
  ),
  "\n```"  
))
```

You can leave most lines as they are, but we want to draw your attention to a couple of settings you might want to change:

- In lines `r grep("restart:", docker_compose)`, we have commented out `restart: unless-stopped`. This is for testing purposes. You should remove the `# ` to activate the setting, once the containers are working properly (i.e., not crashing) so amcat will restart after rebooting your system or crashing.
- In lines `r grep("ports:", docker_compose):(grep("ports:", docker_compose) + 1)`, we set the port to `80` on the host machine. This means you will be able to access the amcat client without specifying a port. If the port is already in use, the conainter will crash. In this case, change `80`to a different port and access amcat through, for example, `localhost:5000`.
- In lines `r grep("discovery.type", docker_compose):(grep("ES_JAVA_OPTS", docker_compose))`, we configured Elasticsearch to form a single-node cluster and use a maximum of 4GB memory.
- In lines `r grep("volumes:", docker_compose):(grep("volumes:", docker_compose) + 1)` we suggested a setting so Elasticsearch will store your data on a volume on the host machine. We recommend this to make it easier to back up your database and reuse it with a different installation of Elasticsearch (e.g., after an update) in the future. However, the container will not run if it does not have proper access to this folder. See the comment to solve this.

When you are happy with your settings, simply run the following command to download and start the three containers (Elasticsearch, amcat4, and amcat4client):

```bash
docker-compose up --pull="missing" -d
```

It might take a couple of seconds for Elasticsearch to start up.
Then you can navigate to [[localhost](http://localhost)](http://localhost/) in your browser to access the amcat client.

![First view of the amcat react app in your browser](media/amcat-1.png)

::: {.callout-important}
# Will change soon

To access your newly created amcat suite, you will first need to create an admin user (note, the second `amcat4` is not a typo, but the command, while the first one is the name of the container):

```bash
docker exec -it amcat4 amcat4 create-admin --username admin --password supergeheim
```
:::

You can also create an example data collection (called index in Elasticsearch):

``` bash
docker exec -it amcat4 amcat4 create-test-index
```

Now you can access this index using the user name and password above and `http://localhost/api` as the host:

![After logging into the amcat react app in your browser](media/amcat-2-local.png)

### Setup on your own server

If you decide not to go with Docker, for example, because you have your own server and you need more control over.
We assume that if you are going this route, you are running a Linux server.
Below we show one example setup.
Obviously feel free to replace the suggested Linux tools like *systemd* or *nginx* with your own choice.

#### amcat4 -- aka amcat server

The first piece to set up is the amcat server and the Elasticsearch database it interacts with.
To download and install Elasticsearch, refer to [their website](https://www.elastic.co/downloads/elasticsearch), or, preferably, install it through a package manager. 
For example, if you are running Debian or Ubuntu or another distro which uses `apt` you can install Elasticsearch 7.x (which we are currently working with) like this:

```bash
curl -fsSL https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo gpg --dearmor -o /usr/share/keyrings/elastic.gpg
echo "deb [signed-by=/usr/share/keyrings/elastic.gpg] https://artifacts.elastic.co/packages/7.x/apt stable main" | sudo tee -a /etc/apt/sources.list.d/elastic-7.x.list
sudo apt update
sudo apt install elasticsearch
```

In the next step, you need to configure Elasticsearch:

```bash
sudo nano /etc/elasticsearch/elasticsearch.yml
```

Configure the database to your own liking in terms of user management and exposure.
Since we are controlling it through `amcat4`, the only two things that really matter is the address and port (and that `amcat4` still has access after you're done configuring Elasticsearch).
<!-- We want Elasticsearch to only expose the port locally, I assume. How do you do that? -->
So within `elasticsearch.yml`, we only look for two lines:

```bash
network.host: localhost
...
http.port: 9200
```

You can configure the memory usage of Elasticsearch

```bash
echo "-Xms4g" | sudo tee -a /etc/elasticsearch/jvm.options.d/memory.options
```

Leaving the values at their defaults here, we can enable the systemd service (skip this step if you've installed Elasticsearch through Docker):

```bash
sudo systemctl daemon-reload
sudo systemctl enable elasticsearch
sudo systemctl start elasticsearch
```

You can check if everything is working with:

```bash
curl -X GET 'http://localhost:9200'
#> {
#>   "name" : "amcat-opted-trekdrop0",
#>   "cluster_name" : "amcat-opted",
#>   "cluster_uuid" : "Sx-D89zmSx2zAcwl62u32A",
#>   "version" : {
#>     "number" : "7.17.6",
#>     "build_flavor" : "default",
#>     "build_type" : "deb",
#>     "build_hash" : "f65e9d338dc1d07b642e14a27f338990148ee5b6",
#>     "build_date" : "2022-08-23T11:08:48.893373482Z",
#>     "build_snapshot" : false,
#>     "lucene_version" : "8.11.1",
#>     "minimum_wire_compatibility_version" : "6.8.0",
#>     "minimum_index_compatibility_version" : "6.0.0-beta1"
#>   },
#>   "tagline" : "You Know, for Search"
#> } 
```

Next, you want to setup the amcat server.
You can do this wherever you like, but will will set things up at `/srv/amcat`:

```bash
sudo git clone https://github.com/ccs-amsterdam/amcat4 /srv/amcat
sudo chown -R $USER:$USER /srv/amcat
cd /srv/amcat
python3 -m venv env
env/bin/pip install -e .[dev]
```

To test if it runs as expected, you can use:

```bash
env/bin/python -m amcat4 run
#> /srv/amcat/env/lib/python3.9/site-packages/elasticsearch/connection/base.py:200: ElasticsearchWarning: Elasticsearch #> built-in security features are not enabled. Without authentication, your cluster could be accessible to anyone. See #> https://www.elastic.co/guide/en/elasticsearch/reference/7.17/security-minimal-setup.html to enable security.
#>   warnings.warn(message, category=ElasticsearchWarning)
#> [INFO   :root           ] Starting server at port 5000, debug=True
#> INFO:     Started server process [1001112]
#> [INFO   :uvicorn.error  ] Started server process [1001112]
#> INFO:     Waiting for application startup.
#> [INFO   :uvicorn.error  ] Waiting for application startup.
#> INFO:     Application startup complete.
#> [INFO   :uvicorn.error  ] Application startup complete.
#> INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
#> [INFO   :uvicorn.error  ] Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
```


::: {.callout-important}
# Will change soon

To create an admin user for testing, use:

```bash
env/bin/python -m amcat4 create-admin
```
:::

Since you probably don't want to run amcat in an open ssh tab all the time, you should set it up as a service, for example with `systemd`.
So head over to `/etc/systemd/system` and create a new file, for example, `amcat.service`.

Here is a small example to set things up:

```bash
[Unit]
Description=Amcat4 API
After=network.target
Requires=elasticsearch.service

[Service]
Type=simple
User=amcat
Group=amcat
WorkingDirectory=/srv/amcat/amcat4

Environment=AMCAT4_ELASTIC_HOST=http://localhost:9200
Environment=AMCAT4_DB_NAME=/srv/amcat/amcat4.db

ExecStart=/srv/amcat/env/bin/uvicorn \
        --proxy-headers \
        --forwarded-allow-ips='*' \
        --workers=2 \
        --no-access-log \
        --uds /tmp/amcat.socket \
        --root-path /api \
        amcat4.api:app

ExecReload=/bin/kill -HUP ${MAINPID}
RestartSec=1
Restart=always

[Install]
WantedBy=multi-user.target
```

In the above service, we run the amcat server as the user `amcat`.
To create this user and hand over the ownership of the amcat server folder to it use:

```bash
sudo useradd amcat
sudo chown -R amcat:amcat /srv/amcat
```

Then you can start the service and enable it to run on startup:

```bash
sudo systemctl daemon-reload
sudo systemctl start amcat.service
sudo systemctl enable amcat.service
```

Now you can check if everything is working with

```bash
systemctl status amcat.service
#> ● amcat.service - Amcat4 API
#>      Loaded: loaded (/etc/systemd/system/amcat.service; enabled; vendor preset: enabled)
#>      Active: active (running) since Thu 2022-11-03 10:39:23 CET; 3min 29s ago
#>    Main PID: 197173 (uvicorn)
#>       Tasks: 4 (limit: 33532)
#>      Memory: 86.8M
#>         CPU: 1.770s
#>      CGroup: /system.slice/amcat.service
#>              ├─197173 /srv/amcat/env/bin/python3 /srv/amcat/env/bin/uvicorn --proxy-headers --forwarded-allow-ips=* --workers=2 --no-access-log --uds /tmp/amcat.socket --root-path /api amcat4.api:app
#>              ├─197174 /srv/amcat/env/bin/python3 -c from multiprocessing.resource_tracker import main;main(4)
#>              ├─197175 /srv/amcat/env/bin/python3 -c from multiprocessing.spawn import spawn_main; spawn_main(tracker_fd=5, pipe_handle=7) --multiprocessing-fork
#>              └─197176 /srv/amcat/env/bin/python3 -c from multiprocessing.spawn import spawn_main; spawn_main(tracker_fd=5, pipe_handle=9) --multiprocessing-fork
```

If something went wrong, you can troubleshoot with `sudo journalctl -eu amcat.service`.

## Frontend
### amcat4client

::: {.callout-note}
If you are using amcat on our servers or through docker, you can skip this section and either the [R](#amcat4r) or [Python](#amcat4apiclient) client to start managing amcat.
:::

If you have checked port 5000 of your new amcat server while testing it above (i.e., `http://0.0.0.0:5000`), you were probably disappointed by a simple `{"detail":"Not Found"}` message.
This is because the client has been split from the main package to make it easier to develop.
You can install the React client next to amcat in`/srv/amcat4client` using:

```bash
cd /srv/
sudo git clone https://github.com/ccs-amsterdam/amcat4client.git
sudo chown -R $USER: amcat4client
cd amcat4client
npm install
```

If you get error messages about outdated versions of dependencies (which is likely on Ubuntu and Debian) you should update `Node.js`.
On Debian, you can do this likes so:

```bash
su
curl -fsSL https://deb.nodesource.com/setup_19.x | bash - &&\
apt-get install -y nodejs
exit
```

And the equivalent on Ubuntu:

```bash
curl -fsSL https://deb.nodesource.com/setup_19.x | sudo -E bash - &&\
sudo apt-get install -y nodejs
```

See [this repository](https://github.com/nodesource/distributions/blob/master/README.md) for instructions for other Linux flavours.

After that, you can build the React app:

```bash
npm run build
```

If your amcat instance will be publicly reachable, you can build the React app permanently attached to only your instance of amcat:

```bash
REACT_APP_FIXED_HOST=https://example.com/api npm run build
```

Once this has finished, you should hand over ownership of the React application to the previously created amcat user

```bash
sudo chown -R amcat:amcat .
```

Now we have an Elasticsearch and amcat4 running. 
But they are currently not accesible.
To solve this, we can use, for example, `nginx` to provide users access to the React frontend and the amcat API.
Create a new `nginx` config file with, for example, nano:

```bash
sudo nano /etc/nginx/sites-available/amcat.conf
```

Below is a minimal example of the `amcat.conf` file, which you can copy and paste:
For more information, visit the [uvicorn documentation website](https://www.uvicorn.org/deployment/#running-behind-nginx).

```bash
server {
    client_max_body_size 4G;

    listen 5000;

    location /api/ {
      rewrite  ^/api/(.*) /$1 break;
      proxy_set_header Host $http_host;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection $connection_upgrade;
      proxy_redirect off;
      proxy_buffering off;
      proxy_pass http://amcat;
    }

    location / {
      root /srv/amcat4client/build;
      index index.html;
      try_files $uri $uri/ /index.html;
    }

}

map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
}

upstream amcat {
    server unix:/tmp/amcat.socket;
}
```
:::{.callout-warning}
# warning about http

This setup assumes that your amcat sever will only be available in the local network.
If it should be accesible via the internet, we **strongly** recommend to enable https.
You can find more information about that on the [`nginx` website](http://nginx.org/en/docs/http/configuring_https_servers.html) or [this guide](https://www.techrepublic.com/article/how-to-enable-ssl-on-nginx/).
:::

To enable the site, use:

```bash
sudo ln -s /etc/nginx/sites-available/amcat.conf /etc/nginx/sites-enabled/amcat.conf 
```

Then simply restart `nginx`, for example, through systemd:

```bash
sudo systemctl restart nginx.service
```

To test if the API is reachable, use this:

```bash
curl http://localhost:5000/api/
#> {"detail":"Not Found"}
```

If everything works, you can now access the client at [http://localhost:5000](http://localhost:5000), or the address of your server, if you installed amcat remotely:

![First view of the amcat react app in your browser](media/amcat-1.png)

The React app is always running locally in your browser, even if you've accessed it on another computer.
So the appropriate host needs to be the route to the amcat server.
In the example above, I set up an amcat instance in my local network on a computer with the IP address `192.168.2.180` and port `5000`.
To access that host, you need to enter:

::: {.callout-note}

Host: "http://192.168.2.180:5000/api"

Email: "admin"

Password: "admin"

:::

Just replace `192.168.2.180` with the address of the machine you set up amcat on.

![After logging into the amcat react app in your browser](media/amcat-2-remote.png)

Success! However, the interface doesn't show much at this point, since we added no data yet.
We will do that in the [storage chapter](#document-storage).

### amcat4apiclient

Install `amcat4apiclient` from the command line trhough `pip`:

```bash
pip install amcat4apiclient
```
The you can open Python and log in:

```{python}
#| eval: false
import json
from amcat4apiclient.amcat4apiclient import AmcatClient

amcat = AmcatClient("http://localhost/api", "admin", "supergeheim")
```

If this does not throw an error, you have set everything up correctly.

### amcat4r

Install `amcat4r` using the following command in `R` (install `remotes` first if you don't have it yet):

```{r}
#| eval: false
remotes::install_github("ccs-amsterdam/amcat4r")
```

If you have set up the amcat suite as shown above, you should be able to log into the database:

```{r}
#| eval: false
library(amcat4r)
login("http://localhost/api",  username = "admin", password = "supergeheim")
```

If this does not throw an error, you have set everything up correctly.
